$toc-padding: rem(0.4);

$group-item-height: rem(4.0);
$layer-item-height: rem(6.0);

$group-item-height-touch: rem(5.6);
$layer-item-height-touch: rem(7.2);


@mixin toc {
    #mainToc {
        top: 49px;
        left: 0px;
        width: 400px;

        @include include-size(rv-sm) {
            top: 49px;
            left: 0px;
            margin: 0;
            width: 100%;
        }
    }

    rv-toc {
        // override default padding on the content
        .rv-content-pane .rv-content {
            padding: 0;
        }
    }

    .rv-toc {
        padding: rem(0.8) 0;
        // @include layer-list;
    }

    @include toc-tools;

    @include keyboard {
        @include entry-controls-hover;
    };

    @include touch {
        @include entry-controls-hover;
    };


    @include newLegend;
}

// TODO: these selector become ridiculously complicated, might want to more the legend set highlighting to the js side
@mixin legend-set-item {
    > ul.rv-group-collapsed > li > rv-legend-block,
    > rv-legend-block {
        rv-legend-control[name="scale"],
        rv-legend-control[name="visibilityset"] {
            @content;
        }
    }
}

@mixin newLegend {

    .rv-legend-list {
        @extend %base-list;
        @extend %grouped-list;

        > li {
            overflow: hidden; // prevents the progress bar from sticking to the bottom of the legend entry when the symbology stack is expanded
        }

        &.ng-hide + .rv-shadow {
            // hide list shadow when the layer list is closed; otherwise, it will still be visilbe
            background-color: transparent !important;
        }

        @for $i from 0 to 2 {
            @include sort-group($i);
        }
    }

    .rv-image-expand {
        position: absolute;
        top: 2.5px;
        right: 2.5px;
    }

    // provide indentations for nested elements
    .rv-legend-level {
        @for $i from 0 to 10 {
            @include legend-list-step($i);
        }
    }

    ul.rv-legend-set-highlight > li {
        @include legend-set-item {
            &:before, &:after {
                background-color: rgba($accent-color, 0.075);
            }
        }
    }

   ul.rv-legend-set.rv-legend-set-collapse > li {
        @include legend-set-item {
            &:before, &:after {
                display: none;
            }
        }
    }

    ul.rv-legend-set > li {
        @include legend-set-item {
            height: 100%;
            display: flex;
            align-items: center;

            &:before, &:after {
                content: "";
                position: absolute;
                top: 0;
                left: 0;
                bottom: 0;
                right: 0;
                border: 1px solid transparent;
                pointer-events: none;
                transition: background-color $swift-ease-in-duration $swift-ease-in-out-timing-function;
            }
        }


        &:first-child {
            @include legend-set-item {
                &:before {
                    border-image: linear-gradient(to bottom, rgba($divider-color, 1) 0%, rgba($divider-color, 1) 6px, rgba(0,0,0,0) 7px);
                    border-image-slice: 1;
                }
            }
        }

        &:last-child {
            @include legend-set-item {
                &:after {
                    border-image: linear-gradient(to top, rgba($divider-color, 1) 0%, rgba($divider-color, 1) 6px, rgba(0,0,0,0) 7px);
                    border-image-slice: 1;
                }
            }
        }
    }

    rv-legend-block {

        @extend %list-item;

        padding-right: $toc-padding;

        height: $layer-item-height;
        @include touch {
            height: $layer-item-height-touch;
        }

        outline: none;

        &.rv-legend-set {
            display: none;
        }

        &.rv-legend-group {
            height: $group-item-height;
            @include touch {
                height: $group-item-height-touch;
            }

            @extend %list-item-control-section;

            // setting layer list shadow color when hover over layer group toggle
            &:hover ~ .rv-shadow {
                background-color: $primary-color;
            }

            // highlight the selected item
            &.rv-selected:before {
                background-color: $accent-color;
            }
        }

        &.rv-legend-node,
        &.rv-legend-bad-projection {
            .rv-list-item-content {
                .rv-list-item-flags {
                    display: flex;

                    rv-legend-flag > div {
                        margin: 0 rem(0.2);

                        &:first-child {
                            margin-left: 0;
                        }

                        &:last-child {
                            margin-right: 0;
                        }
                    }
                }
            }

            @extend %list-item-control-section;

            // highlight the selected item
            &.rv-selected:before {
                background-color: $accent-color;
            }
        }

        &.rv-legend-bad-projection {
            rv-legend-flag[name="badProjection"] md-icon {
                color: $warning-color;
            }
        }

        &.rv-legend-info {

            height: auto;

            .rv-list-item-content {
                margin-left: 0;
            }

            .rv-legend-unboundLayer {
                margin: 0;

                .rv-list-item-body {
                    @extend %body-element;
                }

                height: $layer-item-height;
                @include touch {
                    height: $layer-item-height-touch;
                }

                display: flex;
                justify-content: center;

                > div {
                    display: flex;
                    align-items: center;

                    .rv-list-item-content {
                        margin: 0 rem(1) 0 rem(1.6);
                    }

                    // TODO: this can be moved to a mixin
                    .rv-list-item-flags {
                        display: flex;

                        rv-legend-flag > div {
                            margin: 0 rem(0.2);

                            &:first-child {
                                margin-left: 0;
                            }

                            &:last-child {
                                margin-right: 0;
                            }
                        }
                    }
                }
            }

            .rv-legend-title h3 {
                margin: 0;
            }

            .rv-legend-text p {
                margin: rem(0.6) 0;
            }

            .rv-legend-image img {
                margin: rem(0.6) 0;
                max-width: 100%;
                align-self: center;

                box-shadow: $whiteframe-shadow-1dp;
            }
        }

        &.rv-legend-placeholder {
            @extend %list-item-control-section;
        }

        &.rv-legend-error {
            @extend %list-item-control-section;

            &:before {
                background-color: $alert-color;
            }
        }

        &.rv-legend-collapsed {
            display: none;
        }

        rv-legend-flag {
            // main layer item button was overlapting the flag
            position: relative; // why? http://philipwalton.com/articles/what-no-one-told-you-about-z-index/

            md-icon {
                display: block;
            }
        }

        rv-legend-control {
            display: flex;
        }

        rv-legend-control,
        .rv-list-item-control {
            .md-icon-button {
                margin: 0;
            }
        }
    }

    .rv-expanded-dialog {
        border-radius: 0;

        .expanded-content {
            display: inline-block;
            margin: 0 auto;
        }

        .rv-expanded-image {
            display: block;
            margin: 0 auto;
        }
    }
}

@mixin sort-group($index) {
    &[data-sort-group="#{$index}"] {

        > li:not([data-sort-group="#{$index}"]) {
            opacity: 0.5 !important;

            &:after {
                content: '';
                position: absolute;
                left: 0;
                right: 0;
                top: 0;
                bottom: 0;
                background-color: rgba(0, 0, 0, 0.2);
            }
        }
    }

    &.rv-reorder {
        li[data-sort-group="#{$index}"] {
            margin-top: 0; // !important;

            rv-legend-block:before {
                background-color: lighten($color: $primary-color, $amount: $index * 20);
            }
        }

        li[data-sort-group="#{$index}"] + li[data-sort-group="#{$index + 1}"] {
            margin-top: rem(3.6);
        }
    }
}

%list-item {
    display: flex;

    align-items: center;
    position: relative;

    .rv-list-item-body {
        @extend %body-element;
        .rv-body-button span {
            visibility: hidden;
        }
    }

    .rv-list-item-content {
        display: flex;
        flex-direction: column;
        flex: 1; // content tries to take all available space
        min-width: 0; // Firefox fix for flexbox not wanting to shrink: http://stackoverflow.com/a/31349707
        margin: 0 rem(1.0) 0 rem(1.6);

        .rv-list-item-name {
            font-size: rem(1.6);
            // truncate layer name if it's too long
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }
    }

    .rv-list-item-toggle {
        padding: rem(0.4);
        pointer-events: none;
    }

    // selection indicator
    &:before {
        position: absolute;
        content: "";
        background-color: transparent;
        width: rem(0.5);
        right: 0;
        height: 100%;
        top: 0;
        transition: background-color $swift-ease-in-duration $swift-ease-in-out-timing-function;
    }
}

%list-item-control-section {
    .rv-list-item-controls {
        display: flex;
        align-items: center;
        height: 100%;

        .rv-list-item-control {
            position: relative;
            margin: 0;

            &:first-child {
                margin-left: rem(0.6);
            }
            &:last-child {
                margin-right: rem(0.6);
            }

            &:not(.rv-stay-visible) {
                display: none;

                @include keyboard {
                    display: flex !important;
                };

                @include touch {
                    display: flex !important;
                };
            }
        }
    }

    // force-display list item controls when the list item gets focus or is hovered over
    &:hover, &.rv-selected {
        .rv-list-item-controls .rv-list-item-control {
            display: flex;
            //display: block;
            // display: inline-block !important;
        }
    }
}

// http://krasimirtsonev.com/blog/article/Two-handy-and-advanced-SASS-features-and-their-limitations
// adjust layer item, layer group toggle, and layer list divider indent
@mixin legend-list-step($index) {
    &-#{$index} {
        $offset: rem(0.8); // multiplied by the indentation level

        rv-legend-block {
            padding-left: $offset * ($index) + rem(1.6) + $toc-padding;
        }
    }
}

/* ---------------------- */

@mixin toc-tools {
    .rv-toc-tools {
        height: $group-item-height;
        align-items: center;
        padding: 0 rem(0.4) + rem(0.6) 0 rem(2) - rem(0.4);
        margin-bottom: rem(0.8);

        .md-subhead {
            margin-left: rem(1.0);
        }

        md-menu > .md-button,
        > .md-button {
            margin: 0;
        }

        @include touch {
            height: $group-item-height-touch;
        }
    }
}

@mixin layer-list {
    .rv-layer-level {
        // relative boxes list shadow to the current list
        position: relative;

        @for $i from 0 to 10 {
            @include layer-level-step($i);
        }
    }

    .rv-layer-list {
        @extend %action-list;

        // rotate the icon on the toggle button on open
        .md-toggle-icon {
            transition: transform $swift-ease-in-duration $swift-ease-in-out-timing-function;

            &.rv-toggled {
                transform: rotate(180deg);
            }
        }

        // need to hide overflow during open/close animations so the layer list content displays properly
        &.ng-animate {
            overflow: hidden;

            // prevent toggle icon from animationg during list animation
            .md-toggle-icon {
                transition: none;
            }
        }

        // do not add padding to the root level layer list
        &.rv-root {
            padding-left: 0;
            margin: 0;
            position: relative;
        }

        &.ng-hide + .rv-shadow {
            // hide list shadow when the layer list is closed; otherwise, it will still be visilbe
            background-color: transparent !important;
        }

        .rv-layer-list-divider {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
        }

        @include layer-group-toggle;
        @include layer-item;
        @include entry-placeholder;
    }

    // rv-shadow is a thin guideline drawn on the right side of the list when group toggle is hovered over;
    // it helps to visualize which layers will be affected by the group toggle
    .rv-shadow {
        position: absolute;
        right: 0;
        top: 0;
        bottom: 0;
        width: rem(0.5);
        opacity: 0.45;
        background-color: transparent;
        transition: background-color $swift-ease-in-duration $swift-ease-in-out-timing-function;
    }

    .rv-root {
        @for $i from 0 to 2 {
            @include _sort-group($i);
        }
    }
}

@mixin _sort-group($index) {
    &[data-sort-group="#{$index}"] {

        > li:not([data-sort-group="#{$index}"]) {
            opacity: 0.5 !important;

            &:after {
                content: '';
                position: absolute;
                left: 0;
                right: 0;
                top: 0;
                bottom: 0;
                background-color: rgba(0, 0, 0, 0.2);
            }
        }
    }

    &.rv-reorder {
        li[data-sort-group="#{$index}"] {
            margin-top: 0; // !important;

            rv-toc-entry:before {
                background-color: lighten($color: $primary-color, $amount: $index * 20);
            }
        }

        li[data-sort-group="#{$index}"] + li[data-sort-group="#{$index + 1}"] {
            margin-top: rem(3.6);
        }
    }
}

// http://krasimirtsonev.com/blog/article/Two-handy-and-advanced-SASS-features-and-their-limitations
// adjust layer item, layer group toggle, and layer list divider indent
@mixin layer-level-step($index) {
    &-#{$index} {
        $offset: rem(0.8); // multiplied by the indentation level

        .rv-toc-placeholder-entry {
            padding-left: $offset * ($index) + rem(1.6) + $toc-padding;
        }

        .rv-toc-layer-entry {
            padding-left: $offset * ($index) + rem(1.6) + $toc-padding;

            .item-name-on-top {

                .rv-symbology-item-name {
                    position: absolute;
                    left: - rem(1.0);
                }
            }
        }

        .rv-toc-group-entry {
            padding-left: $offset * ($index) + rem(1.6) + $toc-padding;
        }

        .rv-layer-list-divider {
            left: ($offset + rem(1.0) + $toc-padding) * $index;
        }
    }
}

/*
absolutely position a button underneath an item so it acts like a button body for the item; add content to it using aria labels; make the actual text not pronounceable by aria as well or something like that. this should work for both layer items and layer group toggles;
*/
@mixin layer-group-toggle {

    .rv-toc-group-entry {

        @extend %action-list-group;

        @include entry-controls;
        @include selected-layer-entry;

        height: $group-item-height;
        padding-right: $toc-padding;

        @include touch {
            height: $group-item-height-touch;
        }

        // setting layer list shadow color when hover over layer group toggle
        &:hover {
            @include entry-controls-hover;

            & ~ .rv-shadow {
                background-color: $primary-color;
            }
        }
    }
}

@mixin selected-layer-entry {
    // visually highlights selected layer item in the list
    &.rv-selected {
        // don't hide toggles on a selected layer
        @include entry-controls-hover;

        // the colour md-buttons get on hover
        background-color: rgba(158,158,158,0.2);

        &:before {
            background-color: $accent-color;
        }
    }

    // selection indicator
    &:before {
        position: absolute;
        content: "";
        background-color: transparent;
        width: rem(0.5);
        right: 0;
        height: 100%;
        top: 0;
        transition: background-color $swift-ease-in-duration $swift-ease-in-out-timing-function;
    }
}

@mixin entry-placeholder {
    .rv-toc-placeholder-entry {
        @include entry-controls;
        @include entry-controls-hover;
        @include selected-layer-entry;

        display: flex;
        align-items: center;
        height: $layer-item-height;
        position: relative;
        padding-right: $toc-padding;

        @include touch {
            height: $layer-item-height-touch;
        }

        .rv-layer-body-button {
            text-align: left;
            position: absolute;
            padding: 0;
            margin: 0;
            left: 0;
            width: 100%;
            top: 0;
            bottom: 0;
        }

        .rv-toc-entry-content {
            flex: 1; // content tries to take all available space
            min-width: 0; // Firefox fix for flexbox not wanting to shrink: http://stackoverflow.com/a/31349707
            margin: 0 rem(1.0) 0 rem(1.6);

            .rv-toc-entry-name {
                font-size: rem(1.6);
                // truncate layer name if it's too long
                overflow: hidden;
                white-space: nowrap;
                text-overflow: ellipsis;
            }
        }
    }
}

@mixin layer-item {
    .rv-toc-layer-entry {

        @include entry-controls;
        @include selected-layer-entry;

        display: flex;
        align-items: center;
        height: $layer-item-height;
        position: relative;
        padding-right: $toc-padding;

        @include touch {
            height: $layer-item-height-touch;
        }

        .rv-layer-body-button {
            text-align: left;
            position: absolute;
            padding: 0;
            margin: 0;
            left: 0;
            width: 100%;
            top: 0;
            bottom: 0;
        }

        .rv-layer-item-content {
            flex: 1; // content tries to take all available space
            min-width: 0; // Firefox fix for flexbox not wanting to shrink: http://stackoverflow.com/a/31349707
            margin: 0 rem(1.0) 0 rem(1.6);

            .rv-layer-item-name {
                font-size: rem(1.6);
                // truncate layer name if it's too long
                overflow: hidden;
                white-space: nowrap;
                text-overflow: ellipsis;
            }

            .rv-layer-item-flag {
                display: inline-block;
                margin: 0 rem(0.2);
                // main layer item button was overlapting the flag
                position: relative; // why? http://philipwalton.com/articles/what-no-one-told-you-about-z-index/

                &:first-child {
                    margin-left: 0;
                }

                @include touch {
                    @include icon-size(rem(1.6));
                }
            }
        }

        // TODO: fix
        &.rv-error {
            @include entry-controls-hover;

            .rv-layer-item-caption {
                color: $alert-color;
            }

            &:before {
                background-color: $alert-color;
            }
        }

        &:hover {
            @include entry-controls-hover;
        }
    }
}

@mixin entry-controls {
    .rv-toc-entry-controls {
        z-index: 2;
        margin-left: rem(0.6);
        margin-right: rem(0.6);

        // remove margins between toggle on legend layer entry
        & > * {
            & > .md-button {
                margin: 0;
            }
        }

        // hide controls which should only be shown on hover, selected, touch or keyboard mode
        .rv-hover-show {
            display: none;
        }
    }
}

@mixin entry-controls-hover() {
    .rv-toc-entry-controls > .rv-hover-show {
        display: inline !important;
    }
}
